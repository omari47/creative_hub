# Generated by Django 5.2 on 2025-04-07 08:06

import django.core.validators
import django.db.models.deletion
import media_gallery.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('workshops', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MovieCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Movie Category',
                'verbose_name_plural': 'Movie Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MovieTrailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Trailer Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('trailer_url', models.URLField(max_length=500, verbose_name='Trailer URL')),
                ('thumbnail', models.ImageField(upload_to='trailer_thumbnails/', validators=[media_gallery.validators.validate_image_quality], verbose_name='Thumbnail')),
                ('is_upcoming', models.BooleanField(default=False, verbose_name='Upcoming Release')),
                ('release_date', models.DateField(blank=True, null=True, verbose_name='Release Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Movie Trailer',
                'verbose_name_plural': 'Movie Trailers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MPesaPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='Transaction ID')),
                ('transaction_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Transaction Status')),
                ('mpesa_receipt_number', models.CharField(blank=True, max_length=50, verbose_name='M-Pesa Receipt Number')),
                ('transaction_date', models.DateTimeField(auto_now_add=True, verbose_name='Transaction Date')),
                ('result_code', models.CharField(blank=True, max_length=10, verbose_name='Result Code')),
                ('result_description', models.CharField(blank=True, max_length=255, verbose_name='Result Description')),
            ],
            options={
                'verbose_name': 'M-Pesa Payment',
                'verbose_name_plural': 'M-Pesa Payments',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='FeaturedMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Movie Title')),
                ('subtitle', models.CharField(blank=True, max_length=255, verbose_name='Subtitle/Tagline')),
                ('description', models.TextField(verbose_name='Description')),
                ('director', models.CharField(blank=True, max_length=200, verbose_name='Director')),
                ('cast', models.TextField(blank=True, help_text='Enter actor names separated by commas', verbose_name='Cast')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (minutes)')),
                ('release_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Release Year')),
                ('rating', models.CharField(blank=True, choices=[('G', 'G - General Audiences'), ('PG', 'PG - Parental Guidance Suggested'), ('PG-13', 'PG-13 - Parents Strongly Cautioned'), ('R', 'R - Restricted'), ('NC-17', 'NC-17 - Adults Only')], max_length=10, verbose_name='Rating')),
                ('language', models.CharField(blank=True, max_length=100, verbose_name='Language')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Price')),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Discount Price')),
                ('video_file', models.FileField(blank=True, null=True, upload_to='movies/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm']), media_gallery.validators.validate_video_quality], verbose_name='Video File')),
                ('video_url', models.URLField(blank=True, max_length=500, verbose_name='Video URL')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='movie_thumbnails/', validators=[media_gallery.validators.validate_image_quality], verbose_name='Thumbnail')),
                ('banner_image', models.ImageField(blank=True, help_text='Large widescreen image for featured content sections', null=True, upload_to='movie_banners/', validators=[media_gallery.validators.validate_image_quality], verbose_name='Banner Image')),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured section on homepage', verbose_name='Featured')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='View Count')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('categories', models.ManyToManyField(related_name='movies', to='payments.moviecategory', verbose_name='Categories')),
                ('trailer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='featured_movie', to='payments.movietrailer', verbose_name='Trailer')),
            ],
            options={
                'verbose_name': 'Featured Movie',
                'verbose_name_plural': 'Featured Movies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='Payment Status')),
                ('payment_id', models.CharField(blank=True, max_length=100, verbose_name='Payment ID')),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('card', 'Credit Card'), ('bank', 'Bank Transfer'), ('other', 'Other')], default='mpesa', max_length=50, verbose_name='Payment Method')),
                ('purchased_at', models.DateTimeField(auto_now_add=True, verbose_name='Purchased At')),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='payments.featuredmovie', verbose_name='Movie')),
                ('mpesa_payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='payments.mpesapayment', verbose_name='M-Pesa Payment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('workshop_registration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase', to='workshops.workshopregistration', verbose_name='Workshop Registration')),
            ],
            options={
                'verbose_name': 'Purchase',
                'verbose_name_plural': 'Purchases',
                'ordering': ['-purchased_at'],
            },
        ),
    ]
